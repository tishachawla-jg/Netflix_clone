{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","get","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerurl","setTrailerUrl","useEffect","a","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","onClick","console","log","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","Nav","show","handleShow","window","addEventListener","scrollY","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22d31216.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\ninstance.get('');\r\n\r\n\r\nexport default instance;","import React, { useEffect , useState } from 'react'\r\nimport axios from \"./axios\";\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title , fetchUrl , isLargeRow}) {\r\n    const [movies , setMovies]= useState([]);\r\n    const[trailerurl, setTrailerUrl] = useState(\"\");\r\n    useEffect(() => {\r\n     \r\n        async function fetchData() {\r\n        const request = await axios.get(fetchUrl);\r\n        setMovies(request.data.results);\r\n        return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n    \r\n    \r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        console.log(movie.name);\r\n        if(trailerurl){\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                console.log(url)\r\n                const urlParams = new URLSearchParams(new URL(url).search); \r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) =>  console.log(error));\r\n        }\r\n    console.log(trailerurl);\r\n\r\n    }\r\n  \r\n  \r\n\r\n    return (\r\n        <div className =\"row\">\r\n             <h2>{title}</h2>\r\n\r\n           <div  className=\"row_posters\">\r\n            \r\n               {movies.map(movie =>(\r\n                   <img key = {movie.id} src = {`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} \r\n                   alt = {movie.name} onClick = {() => handleClick(movie)}  \r\n                   className = {`row_poster ${isLargeRow && \"row_posterLarge\"}`}/>\r\n               ))}\r\n\r\n           </div>\r\n           {trailerurl && <YouTube videoId = {trailerurl} opts = {opts} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"19dd4b3792600e71d7d09a2266dfe410\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect , useState } from 'react'\r\nimport requests from './Requests';\r\nimport './Row.css';\r\nimport axios from 'axios';\r\nimport  './Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n\r\n            setMovie(\r\n                request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]\r\n            )\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    console.log(movie);\r\n    return (\r\n        <header className=\"banner\" \r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://media.vanityfair.com/photos/59a5849b194a945f056e2778/7:3/w_1435,h_615,c_limit/t-gossip-girl-spotlight-10-17.jpg\"\r\n                    )`,\r\n                backgroundPosition: \"center center\",\r\n            \r\n        }}>\r\n            <div className=\"banner-contents\">\r\n                <h1 className=\"banner-title\">Gossip Girls</h1>\r\n\r\n                <div className = \"banner-buttons\">\r\n                    <button className = \"banner-button\">Play</button>\r\n                    <button className = \"banner-button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className = \"banner-description\">Gossip Girl is an American teen drama television series based on the novel series of the same name written by Cecily von Ziegesar. Developed for television by Josh Schwartz and Stephanie Savage, it was broadcast on The CW network for six seasons from September 19, 2007, to December 17, 2012.</h1>\r\n            </div>\r\n\r\n            <div className = \"banner-fadeBottom\">\r\n                \r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner","import React , {useEffect , useState}from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show , handleShow] = useState(false);\r\n    useEffect(() => {\r\n      \r\n        window.addEventListener(\"scroll\", () => {\r\n          if (window.scrollY > 100) {\r\n              handleShow(true);\r\n          } else handleShow(false);\r\n          \r\n          return() => {\r\n            window.addEventListener(\"scroll\");\r\n          };\r\n\r\n        });\r\n     \r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n          \r\n          <img className = \"nav-logo\" src  = \"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt = \"Netflix Logo\"/>\r\n          <img className = \"nav-avatar\" src = \"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt = \"Netflix Avatar\"/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n\r\n\r\n       ","\nimport './App.css';\nimport Row from './Row';\nimport requests from './Requests';\nimport './Row.css';\nimport Banner from './Banner'\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner/>\n\n    <Row\n    title = \"NETFLIX ORIGINALS\" fetchUrl ={requests.fetchNetflixOriginals} \n    isLargeRow \n    />\n     \n\n      <Row title = \"TRENDING NOW\" fetchUrl ={requests.fetchTrending}/>\n      <Row title = \"TOP RATED\" fetchUrl ={requests.fetchTopRated}/>\n      <Row title = \"ACTION MOIES\" fetchUrl ={requests.fetchActionMovies}/>\n      <Row title = \"COMEDY MOVIES\" fetchUrl ={requests.fetchComedyMovies}/>\n      <Row title = \"ROMANCE MOVIES\" fetchUrl ={requests.fetchRomanceMovies}/>\n      <Row title = \"DOCUMENTARIES\" fetchUrl ={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}